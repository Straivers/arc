expr = primary | unary | binary ;

primary = name
        | integer
        | char
        | list
        | block
        | function
        | call
        | path
        ;

    list = list_open ','* (var_expr ',')* list_close ;
        var_expr = expr (':' primary? ('=' expr)?)? ;

    block = '{' smt* '}' ;

    call = (list | name | path | self_call) '.'? (list | name | path)
         | call '.'? call
         ;

    path = (name | list | call | self_call) '::' (name | list | call)
         | path '::' path
         ;

    function = primary '=>' expr ;

unary = negate
      | self_call
      ;
    
    negate = '-' primary ;

    self_call = '.' primary ;

binary = expr <op> expr
    op = '+'
       | '-'
       | '*'
       | '/'
       | '^'
       | '%'
       | '='
       | '>'
       | '<'
       | '<='
       | '>='
       ;

stmt = (def | expr) ';'
    def = 'def' name ':' primary? '=' expr ;