stmt = (def | label | break | return | continue | expr) ';'
    def = 'def' name ':' primary? '=' expr ;

    break = 'break' label? expr? ;

    return = 'return' label? expr? ;

    continue = 'continue' label? ;

    expr = operand | label | var_expr;
        label = '\'' name ;
        
        var_expr = name ':' ((primary ('=' expr)?) | ('=' expr));

        operand = primary | unary | binary | if | loop | labeled;

            primary = name
                    | integer
                    | char
                    | list
                    | vector
                    | block
                    | function
                    | call
                    | path
                    ;

                list = list_open ','* (list_member ',')* list_close ;
                    list_member = operand
                                | list_repeat
                                | name ':' primary
                                | name '=' operand
                                | name ':' primary '=' operand
                                | name ':' list_repeat
                                ;
                        list_repeat = operand '...' operand

                vector = list_open primary '..' list_close ;

                block = '{' smt* '}' ;

                function = primary '=>' expr ;

                call = (list | name | path) '.'? (list | name | path)
                    | call '.'? call
                    ;

                path = (name | list | call) '::' (name | list | call)
                    | path '::' path
                    ;

            unary = negate
                | pointer
                | get_ref
                ;
                
                negate = '-' primary ;

                pointer = '*' primary ;

                get_ref = '&' primary ;

            binary = operand op operand
                op = '+'
                | '-'
                | '*'
                | '/'
                | '^'
                | '%'
                | '='
                | '>'
                | '<'
                | '<='
                | '>='
                | '=='
                | 'and'
                | 'or'
                ;

            if = 'if' operand block (else block)? ;

            loop = 'loop' block ;

            labeled = label (if | loop | block | function) ;
