statement = def ';'
          | expr ';'
          | block
          | primary '=' expr ';'
          ;

    def = 'def' name ':' type? ((type ('=' expr)?) | ('=' expr)) ;

    block = '{' statement* '}' ;

    expr = primary | prefix | binary;

        primary = access
                | call
                | char
                | list
                | function
                | integer
                | name
                | path
                | var
                ;

            access = prefix '.' name ;

            call = prefix list ;

            list = list_open ','* (list_member ',')* list_close ;
                list_member = expr
                            | name ':' type
                            | name '=' expr
                            | name ':' type '=' expr
                            ;

            function = (name | variable | list) '->' expr block? ;

            path = name ('::' name)* ;

            var = name ':' ((type ('=' expr)?) | ('=' expr)) ;

        prefix = '-' primary
               | '!' primary
               | 'import' path
               ;

        binary = expr op expr
            op = '+'
               | '-'
               | '*'
               | '/'
               | '^'
               | '%'
               | '>'
               | '<'
               | '<='
               | '>='
               | '=='
               | '!='
               | 'and'
               | 'or'
               | '='
               ;

type = access
     | list
     | function_type
     | name
     ;

    function_type = type_list '->' type ;