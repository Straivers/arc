statement = def ';'
          | expr '=' expr ';'
          | block
          | name ':' type? ('=' expr)? ';'                              # var
          ;

    def = 'def' name ':' ((type ('=' expr)?) | ('=' expr)) ;

    block = '{' statement* '}' ;

    if = 'if' expr block ('else' 'if' statement)* ('else' statement)? ;

    loop = 'loop' block ;

    escape = 'break' | 'continue' | ('return' expr?) ;

    expr = primary | prefix | binary;

        primary = access
                | char
                | list
                | function
                | integer
                | name
                | path
                ;

            access = prefix '.' name ;

            list = list_open ','* (list_member ',')* list_close ;
                list_member = expr
                            | name ':' type
                            | name '=' expr
                            | name ':' type '=' expr
                            ;

            function = list '=>' expr block? ;

            function_type = list '->' expr ;

            path = name ('::' name)* ;

        prefix = '-' primary
               | '!' primary
               | 'import' path
               | primary
               ;

        binary = expr op expr
               | expr expr
               ;

            op = '+'
               | '-'
               | '*'
               | '/'
               | '^'
               | '%'
               | '>'
               | '<'
               | '<='
               | '>='
               | '=='
               | '!='
               | 'and'
               | 'or'
               ;